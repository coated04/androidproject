stages:
  - test
  - build
  - deploy

# Global environment variables
variables:
  ANDROID_HOME: "/opt/android-sdk-linux"
  GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle"
  PATH: "$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$PATH"
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.configureondemand=true"

# Before script: Setting up Android SDK and other dependencies
before_script:
  - echo "Setting up Android SDK..."
  - yes | sdkmanager --licenses
  - sdkmanager --update
  - sdkmanager "build-tools;30.0.3" "platforms;android-30" "platform-tools" "emulator" "system-images;android-30;google_apis;x86_64"

# Job for running tests
test:
  stage: test
  script:
    - ./gradlew testDebugUnitTest
  artifacts:
    paths:
      - app/build/reports/tests/testDebugUnitTest/index.html
    expire_in: 1 week
  allow_failure: false

# Job for building APK
build:
  stage: build
  script:
    - ./gradlew clean assembleDebug
  artifacts:
    paths:
      - app/build/outputs/apk/debug/app-debug.apk
    expire_in: 1 week
  only:
    - main  # Ensure this job runs only on the main branch or any other branch of your choice

# Optional: Deployment job (you can add this section if you want to deploy the APK to some service)
deploy:
  stage: deploy
  script:
    - echo "Deploying APK to server/Play Store/Artifactory (optional)"
    - curl -X POST -F "file=@app/build/outputs/apk/debug/app-debug.apk" http://your-deployment-server/upload
  only:
    - main  # Ensure deploy happens only on the main branch
  dependencies:
    - build

# Cache dependencies to speed up builds
cache:
  paths:
    - .gradle
    - app/build
